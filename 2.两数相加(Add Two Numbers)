# 一、题目
给出两个 **非空** 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 **逆序** 的方式存储的，并且它们的每个节点只能存储 **一位** 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：
```Java
输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807
```

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/add-two-numbers
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
# 二、分析及代码
本题从算法角度，直接求解复杂度即可达到 O(n)，各种具体实现方式效率上可能存在细节差别。
## 1. 取出各位数字，依次相加后添加进答案链表
### （1）解法
```c
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* ans = new ListNode(0);
        ListNode* ansPosi = ans;
        bool addOne; //也可用整数{0,1}表示，经测试效果相同
        while (l1 != NULL || l2 != NULL || addOne) {
            //取出该位数值
            int num1 = 0, num2 = 0;
            if (l1 != NULL) {
                num1 = l1 -> val;
                l1 = l1 -> next;
            }
            if (l2 != NULL) {
                num2 = l2 -> val;
                l2 = l2 -> next;
            }
            
            //相加、进位
            int sum = num1 + num2;
            if (addOne) sum++;
            addOne = false;
            if (sum > 9) {
                addOne = true;
                sum = sum - 10;
            }
            
            // 写入答案链表
            ListNode *nextPosi = new ListNode(sum);
            ansPosi -> next = nextPosi;
            ansPosi = ansPosi -> next;
        }
        return ans -> next; //考虑代码简洁性，从答案链表第二位开始写入，因此返回第二位
        
    }
};
```
### （2）结果
**执行用时** : 40 ms, 在所有 C++ 提交中击败了48.17%的用户；
**内存消耗** : 10.3 MB, 在所有 C++ 提交中击败了84.13%的用户。

## 2. 对答案链表写入过程优化
### （1）解法
写入答案链表代码部分，创建新节点后，**直接赋值** 给当前节点的下一个节点，减少操作步骤。
```c
	//写入答案链表
    ansPosi -> next = new ListNode(sum);
    ansPosi = ansPosi -> next;
```
### （2）结果
**执行用时** :28 ms, 在所有 C++ 提交中击败了94.61%的用户；
**内存消耗** :10.3 MB, 在所有 C++ 提交中击败了89.76%的用户。

效率有一定提升。
## 3. 将答案链表直接存储于l1中
### （1）解法
```c
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* ans = l1;
        ListNode* tmp;
        int addOne = 0;
        
        while (l1 != NULL) {
            if (l2 != NULL) {
                l1 -> val = l1 -> val + l2 -> val + addOne;
                addOne = 0;
                if (l1 -> val > 9) {
                    l1 -> val -= 10;
                    addOne = 1;
                }
                tmp = l1;
                l1 = l1 -> next;
                l2 = l2 -> next;
            } 
            else {
                l1 = l1 -> next;
                if (addOne == 0)
                    return ans;
            }
        }
        if (l2 != NULL) {
            tmp -> next = l2;
        }
        
        l1 = tmp -> next;
        while (addOne && l1 != NULL) {
            l1 -> val ++;
            addOne = 0;
            if (l1 -> val > 9) {
                l1 -> val -= 10;
                addOne = 1;
            }
            tmp = l1;
            l1 = l1 -> next;
        }
        if (addOne) {
            tmp -> next = new ListNode(1);
        }
        return ans;
    }
};
```
### （2）结果
**执行用时** :24 ms, 在所有 C++ 提交中击败了98.60%的用户；
**内存消耗** :9.6 MB, 在所有 C++ 提交中击败了99.46%的用户。

内存消耗有一定减少。
## 4. 直接将输入链表转换为数值求解
### （1）解法
考虑直接将输入的2个链表转换为十进制数值，求解后将十进制数值转换回答案链表。
```c
class Solution {
public:
	ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int num1 = 0, num2 = 0;
        int count = 1;
        while (l1 != NULL) {
            num1 += l1->val * count;
            l1 = l1->next;
            count = count * 10;
        }   
        count = 1;
        while (l2 != NULL) {
            num2 += l2->val * count;
            l2 = l2->next;
            count = count * 10;
        }
        
        int sum = num1 + num2;
        ListNode* ans = new ListNode(sum % 10);
        ListNode* head = ans;
        sum = sum / 10;
        
        while (sum != 0) {
            ans->next = new ListNode(sum % 10);
            ans = ans->next;
            sum = sum / 10;
        }
                
        return head;
    }
};
```
### （2）结果
**执行出错信息：**
Line 21: Char 29: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type 'int' (solution.cpp)
**最后执行的输入：**
[9]
[1,9,9,9,9,9,9,9,9,9]

数据溢出了，换为 long long int 试试。

**执行出错信息：**
Line 17: Char 19: runtime error: signed integer overflow: 1000000000000000000 * 10 cannot be represented in type 'long long int' (solution.cpp)
**最后执行的输入：**
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[5,6,4]
 
 因此用这种方法也只能分段处理链表，意义较小。

## 5. 系统范例运行测试
系统中有许多运行速度更快的解法，但解法上似乎与目前方法相似，未找到明显优化空间，因此进行运行测试。

（系统中执行12ms的范例）
### （1）解法
```c
class Solution {
public:
public:
	ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
		ListNode* ans = new ListNode(0);
		ListNode* head = ans;
		int add = 0;
		while (l1 != NULL || l2 != NULL) {
			int leftNum = 0, rightNum = 0;
			if (l1) {
				leftNum = l1->val;
				l1 = l1->next;
			}
			if (l2) {
				rightNum = l2->val;
				l2 = l2->next;
			}
			ans->next = new ListNode((leftNum + rightNum + add) % 10);
			ans = ans->next;
			add = (leftNum + rightNum + add) / 10;
		}
		if (add > 0) ans->next = new ListNode(add);
		return head->next;
	}
};
```
### （2）结果
**执行用时** :36 ms, 在所有 C++ 提交中击败了66.31%的用户；
**内存消耗** :10.4 MB, 在所有 C++ 提交中击败了81.84%的用户。

由此可见，执行用时存在一定场外因素。
# 三、其他
## 1. 结构体代码细节
**（1）指针用 ->**
```c
ListNode* ans;
ans -> val = num;
```

**（2）结构体用.**
```c
ListNode ans;
ans.val = num;
```

**（3）注意创建新指针和新结构体的区别**
创建新指针后直接赋值会出错，因为实际无新的结构体。
```c
ListNode* nextPosi;
ansPosi -> next = nextPosi;
ansPosi -> val = sum;
```
创建新结构体后，可赋值给指针。
```c
ListNode* ans = new ListNode(sum % 10);
```

